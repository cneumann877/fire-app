version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: fire_department
      POSTGRES_USER: fire_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-setup.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - fire_dept_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fire_admin -d fire_department"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.backend
    restart: always
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: fire_department
      DB_USER: fire_admin
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      FIRSTDUE_EMAIL: ${FIRSTDUE_EMAIL}
      FIRSTDUE_PASSWORD: ${FIRSTDUE_PASSWORD}
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - fire_dept_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - fire_dept_network

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - fire_dept_network

  # Backup service
  backup:
    image: postgres:15-alpine
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - ./backups:/backups
      - ./backup-script.sh:/backup.sh
    depends_on:
      - database
    networks:
      - fire_dept_network
    command: /bin/bash /backup.sh

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  fire_dept_network:
    driver: bridge
